[[sec_setting_keys_map]]
=== Setting keys in a map
[role="byline"]
by Luke VanderHart

==== Problem

You want to "change" a map by adding, setting or removing keys.

==== Solution

The most basic way to change a map is using the +assoc+ function.
Given a map and any number of additional key/value pairs as arguments,
it will return an updated map containing the respective keys and
values.

[source,clojure]
----
(def villain {:honorific "Dr." :name "Mayhem"})
(assoc villain :occupation "Mad Scientist" :status :at-large)
;; -> {:honorific "Dr.", :name "Mayhem",
;;     :occupation "Mad Scientist", :status :at-large}
----

If used on a map which already contains a key, the +assoc+ function
will return an updated map with the newly specified value for the key.

[source,clojure]
----
(def villain {:honorific "Dr.", :name "Mayhem",
              :occupation "Mad Scientist", :status :at-large})
(assoc villain :status :deceased)
;; -> {:honorific "Dr.", :name "Mayhem",
;;     :occupation "Mad Scientist", :status :deceased}
----

To remove keys, use the +dissoc+ function, which given a map and any
number of keys, returns a map absent those keys.

[source,clojure]
----
(def villain {:honorific "Dr.", :name "Mayhem",
              :occupation "Mad Scientist", :status :deceased})
(dissoc villain :occupation :honorific)
;; -> {:name "Mayhem", :status :deceased}
----

==== Discussion

It's fairly common to have maps contained in other maps. If it is
necessary to update a deeply nested value, nested calls to +assoc+
quickly become inconvenient, especially since they need to be
"inside-out". Consider the following data structure:

[source,clojure]
----
(def book {:title "Clojure Cookbook"
           :author {:name "Ryan Neufeld"
                    :residence {:country "USA"}}})
----

If Ryan were to move back to his native land of Canada, fully updating
the map representing this book using only +assoc+ would look something
like the following:

[source,clojure]
----
(assoc book :author
  (assoc (:author book) :residence
    (assoc (:residence (:author book)) :country "Canada")))
----

Obviously, this is inconvenient, and difficult to read.

// TODO: This is a bit of a mouthful, we may want to try rewording this.
Fortunately, Clojure provides a function, +update-in+, for
specifically this purpose. It takes a map, a sequence of keys, and a
function to apply to the existing value (optionally, arguments to the
function can be passed as variadic arguments). It uses the key
sequence to make successive lookups in a nested data structure,
applies the function and any arguments to the value at the specified
location, and returns the fully nested data structure with the update
in place. In the example above:

[source,clojure]
----
(update-in book [:author :residence] assoc :country "Canada")
----

This first looks up the map associated with the +:residence+ key in
the nested data structure, then invokes the +assoc+ function on it,
using the arguments +:country+ and +"Canada"+, returning the outer
data structure.

+update-in+ will also actually create maps for any of the keys in the
vector that don't exist. This means it can be used to create structure
as well as update values.

[source,clojure]
----
(update-in {} [:author :residence] assoc :country "USA")
;; -> {:author {:residence {:country "USA"}}}
----

Even though the starting map is empty, two empty maps are created for
the values of the +:author+ and +:residence+ keys, meaning the +assoc+
will be applied to a new, empty map.

.Treating Clojure's state constructs like maps
****
One other common use case for maps is as the values of one of
Clojure's state constructs; _atoms_, _refs_ or _agents_. Clojure maps
themselves are immutable values; in a very literal sense, if you "add"
a key to a map, it is no longer the same value any more. But
sometimes, it is necessary to preserve a logical *identity* for
different values across time. That's when to use one of the state
management tools.

To update the value of a piece of state (+ref+, +atom+ or +agent+) you
invoke its specific state transition function (+alter+, +swap!+, or
+send+, respectively.) State transition functions share a common form;
they take the reference as the first argument, the function to apply
to the value as the second argument, and any arguments to the function
as additional arguments.

So, for example, to deeply update an item contained in a map
referenced by an atom, you can invoke the +swap!+ function (the state
transition function for atoms), passing it your atom and the
+update-in+ function, along with the list of keys and the function to
use to update the value.

[source,clojure]
----
(def retail-data (atom {:customers [{:id 123 :name "Luke"}
                                    {:id 321 :name "Ryan"}]
                        :orders [{:sku "Q2M9" :customer 123 :qty 4}
                                 {:sku "43XP" :customer 321 :qty 1}]}))

(swap! retail-data update-in [:orders] conj
       {:sku "9QED" :customer 321 :qty 2})
----

This will add a new order map to the list of orders contained in the
map contained in the +retail-data+ atom.

Although such triple-combos are not terribly common, they illustrate
the general consistency of functions which take other functions and
arguments, and how they can be combined arbitrarily deeply. In this
case, what starts with a single call to +swap!+ ends up also updating
a map and conjoining to a vector in the same form.
****

==== See also

* <<sec_composite_maps_as_seqs>>
* <<sec_composite_combining_maps>>
